Not yet done:

-logarithmic display
 -find out what it means for the DCT to be normalized, and take advantage of it if it's useful
-logarithmic sliders
-show nearest musical note in position readout
-memory monitoring (java.util.management)
-(internal) make the undo manager that fire events after undo and redo so the actions can change state
-better user interface for choosing a tool and changing its properties
 -paint tool brush shape (based on greyscale bitmaps)
 -copy/paste with option of logarithmic or linear
-(internal) refactor the region tools once there are enough of them to know what's common and what's special
-(internal) API fix: it should be a secret that the clip data is painted upside down.
 practical upshot: remove the ClipPanel.toClipCoords() method, and everything
                   should still work the same.
 easiest fix: just reverse the DCT results after computing, and re-reverse them
              before performing the inverse xform.
 best fix: figure out how to compute the DCT that way in the first place
 compromise: hide the array in Frame, and have the access methods translate the
             y value.
-file menu with open and close; multiple projects open at same time
-edit menu with image and audio copy and paste
-ability to play just the selected (time) region; optional looping
-Component for drawing an alpha curve (straight multiplier isn't good enough)
-top-level exception catcher (including uncaught swing exceptions)
-Paintbrush shape/size selector (maybe use greyscale PNGs to describe paintbrushes)
-Paint to an alpha channel instead of directly modifying frames?
 -if so, take the alpha channel into account during playback
-Pause should be immediate (don't drain the output line; flush it) 
-indicator of current playback position during playback and while paused 
-import and export 16-bit greyscale images

Release 0.3:
-Undo/redo for modifications (painting and regions)
-(internal) Moved region features into ClipPanel so it's easier to make new region tools
-now the window is never wider than the screen when opening a new clip
-bigger scroll increment on clip panel
-moved save button, undo/redo, and shuttle controls to top (into toolbar)
-(internal) clip panel now fires property change events when region changes
-"scale region" tool now uses a slider instead of two buttons
-(internal)undo logic in scale region tool now works when undoing while an edit is in progress
 -this was done by implementing replaceEdit() and firing a new undoable edit for every step of the slider
-(internal) clip panel now fires undo events when region changes
-Improved user interface for choosing tools and interacting with them
-Implemented new tools that operate on a selected rectangular region:
  -zero out data over/under a threshold
  -scale data up or down
  -flip data upside down or backwards
-(internal) fixed off-by-1 error in flip
-Continuous readout reporting mouse position: frequency (y axis) and time (x axis). 
-huge performance improvement in clip->display updates (the brightness slider is now "like butter")
-(internal) factored out an interface so it's easy to come up with different colorization strategies

Release 0.2: August 9, 2008
Fixes to save dialog:
 -now it works (failed with ClassCastException in 0.1)
 -appends ".wav" to filenames that don't already end with ".wav"


Release 0.1: August 7, 2008
-forward transform (analysis)
-Reverse transform
 -in-program playback
 -save modified audio back to WAV file
-pref for fft-data to image-data multiplier (i.e. brightness)
-Paintbrush tool for modifying spectral data
-selective image update (to make paintbrush more responsive)
-build script that creates a single executable jar with release number in its name
-don't stretch the image when it's smaller than the dialog (paint blank space instead)
-show product version number in UI

Window articles to look up:

    F. J. Harris, "On the Use of Windows for Harmonic Analysis with the Discrete Fourier Transform", IEEE Proceedings, January 1978, pp. 51-83.

        Perhaps the classic overview paper for discrete-time windows. It discusses some 15 different classes of windows including their spectral responses and the reasons for their development. [Brian Evans, bevans@ece.utexas.edu]

        There are several typos in the above paper. The errors are corrected in:

    A. H. Nuttall, "Some Windows with Very Good Sidelobe Behavior," IEEE Trans. on Acoustics, Speech, and Signal Processing, Vol. ASSP-29, No. 1, February 1981.

    Nezih C. Geckinli and Davras Yavuz, "Some Novel Windows and a Concise Tutorial Comparison of Window Families", IEEE Transactions on Acoustics, Speech, and Signal Processing, Vol. ASSP-26, No. 6, December 1978.

    Lineu C. Barbosa, "A Maximum-Energy-Concentration Spectral Window," IBM J. Res. Develop., Vol. 30, No. 3, May 1986, p. 321-325.

        An elegant method for designing a time-discrete solution for realization of a spectral window which is ideal from an energy concentration viewpoint. This window is one that concentrates the maximum amount of energy in a specified bandwidth and hence provides optimal spectral resolution. Unlike the Kaiser window, this window is a discrete-time realization having the same objectives as the continuous-time prolate spheroidal function; at the expense of not having a closed form solution. [Joe Campbell, jpcampb@afterlife.ncsc.mil] 

    D. J. Thomson, "Spectrum Estimation and Harmonic Analysis," Proc. of the IEEE, vol. 70, no. 9, pp. 1055-1096, Sep. 1982.

        In his classic 1982 paper, David Thompson proposes the powerful multiple-window method, which is an elegant and robust technique for spectrum estimation. Based on the Cramer representation, Thompson's method is nonparametric, consistent, efficient, and optimally suited for finite data samples. In addition, it has excellent bias control and stability, provides an analysis of variance test for line components, and finally, works very well in many practical applications. Unfortunately, his important work has been neglected in many textbooks and graduate courses on statistical signal processing. [Dong Wei, wei@vision.ece.utexas.edu, and Brian Evans, bevans@ece.utexas.edu]

